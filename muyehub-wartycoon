local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "War Tycoon",
    LoadingTitle = "Loading the best war-tycoon script....",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "WarTycoonConfig",
        FileName = "Settings"
    },
    Discord = {
        Enabled = false,
        Invite = "tG9CNEgvEp",
        RememberJoins = false,
    },
})

local function getPlayerTycoon()
    local tycoonFolder = workspace:FindFirstChild("Tycoon")
    if not tycoonFolder then return nil end
    local tycoonsFolder = tycoonFolder:FindFirstChild("Tycoons")
    if not tycoonsFolder then return nil end
    for _, tycoon in pairs(tycoonsFolder:GetChildren()) do
        if tycoon:FindFirstChild("Owner") and tycoon.Owner.Value == game.Players.LocalPlayer then
            return tycoon
        end
    end
    return nil
end

local AutoFarmTab = Window:CreateTab("Auto Farm", 4483362458)
local FarmMoneySection = AutoFarmTab:CreateSection("Farm Money")
local autoFarmEnabled = false

local function collectMoney(collector)
    if not collector then return end
    local chr = game.Players.LocalPlayer.Character
    if not chr or not chr:FindFirstChild("HumanoidRootPart") then return end
    local hrp = chr.HumanoidRootPart
    hrp.CFrame = collector.CFrame * CFrame.new(2, 3, -2)
    task.wait(0.3)
    hrp.CFrame = collector.CFrame + Vector3.new(0, 3, 0)
    task.wait(0.5)
end

local function autoFarmCycle()
    local tycoon = getPlayerTycoon()
    if not tycoon then return end
    local essentials = tycoon:FindFirstChild("Essentials")
    if not essentials then return end
    local mainCollector = essentials:FindFirstChild("CashCollector")
    if mainCollector then collectMoney(mainCollector) end
    if tycoon:FindFirstChild("PurchasedObjects") and tycoon.PurchasedObjects:FindFirstChild("Oil Drill 1") then
        local bunkerCollector = essentials:FindFirstChild("CashCollector2")
        if bunkerCollector then collectMoney(bunkerCollector) end
    end
end

AutoFarmTab:CreateToggle({
    Name = "Auto-farm Money",
    CurrentValue = false,
    Flag = "AutoFarmEnabled",
    Callback = function(value)
        autoFarmEnabled = value
        while autoFarmEnabled do
            autoFarmCycle()
            task.wait(5)
        end
    end,
})

local AutoBuySection = AutoFarmTab:CreateSection("Auto Buy")
local autoBuyEnabled = false

local function buyAllButtons()
    local tycoon = getPlayerTycoon()
    if not tycoon then return end
    local chr = game.Players.LocalPlayer.Character
    if not chr or not chr:FindFirstChild("HumanoidRootPart") then return end
    local hrp = chr.HumanoidRootPart
    local buttons = tycoon:FindFirstChild("UnpurchasedButtons") or tycoon:FindFirstChild("Buttons")
    if not buttons then return end
    for _, button in pairs(buttons:GetChildren()) do
        if not autoBuyEnabled then break end
        if not (button:IsA("Model") or button:IsA("BasePart")) then continue end
        local part = button:FindFirstChild("Part") or button:FindFirstChild("Button") or (button:IsA("BasePart") and button)
        if not part then continue end
        hrp.CFrame = part.CFrame * CFrame.new(1, 3, -3)
        task.wait(0.3)
        hrp.CFrame = part.CFrame + Vector3.new(0, 3, 0)
        task.wait(0.3)
        firetouchinterest(hrp, part, 0)
        task.wait(0.1)
        firetouchinterest(hrp, part, 1)
        task.wait(0.5)
    end
end

AutoFarmTab:CreateToggle({
    Name = "Auto Buy",
    CurrentValue = false,
    Flag = "AutoBuyEnabled",
    Callback = function(value)
        autoBuyEnabled = value
        while autoBuyEnabled do
            buyAllButtons()
            task.wait(3)
        end
    end,
})

local PVPTab = Window:CreateTab("PVP", 4483362458)
local AimbotSection = PVPTab:CreateSection("Aimbot")
local aimbotConfig = {
    Enabled = false,
    TeamCheck = true,
    FOV = 100,
    Smoothness = 0.3,
    TargetPart = "Head"
}

local function aimAtNearest()
    if not aimbotConfig.Enabled then return end
    local cam = workspace.CurrentCamera
    local localPlayer = game.Players.LocalPlayer
    local closest, dist = nil, aimbotConfig.FOV
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= localPlayer and player.Character then
            if aimbotConfig.TeamCheck and player.Team == localPlayer.Team then continue end
            local target = player.Character:FindFirstChild(aimbotConfig.TargetPart)
            if target then
                local pos, onScreen = cam:WorldToViewportPoint(target.Position)
                if onScreen then
                    local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(cam.ViewportSize.X/2, cam.ViewportSize.Y/2)).Magnitude
                    if magnitude < dist then
                        closest = target
                        dist = magnitude
                    end
                end
            end
        end
    end
    if closest then
        local currentPos = cam.CFrame.Position
        local newLook = (closest.Position - currentPos).Unit
        local smoothedLook = cam.CFrame.LookVector:Lerp(newLook, aimbotConfig.Smoothness)
        cam.CFrame = CFrame.new(currentPos, currentPos + smoothedLook)
    end
end

PVPTab:CreateToggle({
    Name = "Enable Aimbot",
    CurrentValue = false,
    Flag = "AimbotEnabled",
    Callback = function(value)
        aimbotConfig.Enabled = value
        if value then
            game:GetService("RunService").RenderStepped:Connect(aimAtNearest)
        end
    end
})

PVPTab:CreateToggle({
    Name = "Team Check",
    CurrentValue = aimbotConfig.TeamCheck,
    Flag = "AimbotTeamCheck",
    Callback = function(value)
        aimbotConfig.TeamCheck = value
    end
})

PVPTab:CreateSlider({
    Name = "FOV",
    Range = {10, 500},
    Increment = 10,
    CurrentValue = aimbotConfig.FOV,
    Flag = "AimbotFOV",
    Callback = function(value)
        aimbotConfig.FOV = value
    end
})

PVPTab:CreateSlider({
    Name = "Smoothness",
    Range = {0.1, 1},
    Increment = 0.1,
    CurrentValue = aimbotConfig.Smoothness,
    Flag = "AimbotSmoothness",
    Callback = function(value)
        aimbotConfig.Smoothness = value
    end
})

PVPTab:CreateDropdown({
    Name = "Target Part",
    Options = {"Head", "HumanoidRootPart", "UpperTorso"},
    CurrentOption = aimbotConfig.TargetPart,
    Flag = "AimbotTargetPart",
    Callback = function(value)
        aimbotConfig.TargetPart = value
    end
})

local PlayerTab = Window:CreateTab("Player", 4483362458)
local AntiAFKSection = PlayerTab:CreateSection("Anti-AFK")

PlayerTab:CreateToggle({
    Name = "Anti-AFK",
    CurrentValue = false,
    Flag = "AntiAFKEnabled",
    Callback = function(value)
        if value then
            coroutine.wrap(function()
                while getgenv().AntiAFKEnabled do
                    game:GetService("VirtualUser"):CaptureController()
                    game:GetService("VirtualUser"):ClickButton2(Vector2.new())
                    task.wait(60)
                end
            end)()
        end
        getgenv().AntiAFKEnabled = value
    end
})

local SpeedSection = PlayerTab:CreateSection("Custom Speed")

PlayerTab:CreateSlider({
    Name = "Walk Speed",
    Range = {16, 1000},
    Increment = 1,
    CurrentValue = 16,
    Flag = "WalkSpeed",
    Callback = function(value)
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid.WalkSpeed = value
        end
    end
})

game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid")
    if PlayerTab:GetConfiguration().WalkSpeed then
        character.Humanoid.WalkSpeed = PlayerTab:GetConfiguration().WalkSpeed
    end
end)

Rayfield:LoadConfiguration()
